package com.epam.rd.autocode.assessment.appliances.service;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.*;
import java.util.function.Function;

@Service
public class JwtService {

    // üîê –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 32 —Å–∏–º–≤–æ–ª–∏ (BASE64)
    private static final String SECRET_KEY = "DyZ9O7ykcN6p+TzhCEF6p9Ucjb6e5zdYxLJeLzHWgS8=";
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(JwtService.class);

    // üõ† –†–æ–∑—à–∏—Ä—é—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Ç–æ–∫–µ–Ω–∞
    // üõ† –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω –±–µ–∑ CustomUserDetails
    public String generateToken(UserDetails userDetails) {
        try {
            Map<String, Object> claims = new HashMap<>();

            // –í–∏—Ç—è–≥—É—î–º–æ —Ä–æ–ª—å –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ UserDetails
            String role = userDetails.getAuthorities().stream()
                    .findFirst()
                    .map(Object::toString)
                    .orElse("ROLE_UNKNOWN");

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ email/username —è–∫ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
            claims.put("role", role);
            claims.put("userId", userDetails.getUsername()); // email —è–∫ userId
            claims.put("name", userDetails.getUsername());   // email —è–∫ name

            return Jwts.builder()
                    .setClaims(claims)
                    .setSubject(userDetails.getUsername())
                    .setIssuedAt(new Date(System.currentTimeMillis()))
                    .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 –≥–æ–¥–∏–Ω
                    .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                    .compact();

        } catch (IllegalArgumentException e) {
            logger.error("Error creating JWT token - invalid argument: {}", e.getMessage(), e);
            throw new RuntimeException("Could not create JWT token: invalid argument", e);
        } catch (JwtException e) {
            logger.error("Error creating JWT token - JWT exception: {}", e.getMessage(), e);
            throw new RuntimeException("Could not create JWT token: JWT error", e);
        } catch (Exception e) {
            logger.error("Unexpected error creating JWT token for user: {}",
                    userDetails != null ? userDetails.getUsername() : "null", e);
            throw new RuntimeException("Could not create JWT token: unexpected error", e);
        }
    }


    // üîç –ú–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–æ–∫–µ–Ω–∞
    public String extractUserId(String token) {
        try {
            return extractClaim(token, claims -> {
                Object userId = claims.get("userId");
                return userId != null ? userId.toString() : null;
            });
        } catch (Exception e) {
            logger.warn("Could not extract userId from token: {}", e.getMessage());
            return null;
        }
    }

    public String extractRole(String token) {
        try {
            return extractClaim(token, claims -> {
                Object role = claims.get("role");
                return role != null ? role.toString() : "ROLE_UNKNOWN";
            });
        } catch (Exception e) {
            logger.warn("Could not extract role from token: {}", e.getMessage());
            return "ROLE_UNKNOWN";
        }
    }

    public String extractName(String token) {
        try {
            return extractClaim(token, claims -> {
                Object name = claims.get("name");
                return name != null ? name.toString() : null;
            });
        } catch (Exception e) {
            logger.warn("Could not extract name from token: {}", e.getMessage());
            return null;
        }
    }

    // üîé –í–∏—Ç—è–≥—É—î–º–æ email –∞–±–æ username
    public String extractUsername(String token) {
        try {
            return extractClaim(token, Claims::getSubject);
        } catch (Exception e) {
            logger.warn("Could not extract username from token: {}", e.getMessage());
            return null;
        }
    }

    // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
    public boolean isTokenValid(String token, UserDetails userDetails) {
        try {
            final String username = extractUsername(token);
            return username != null &&
                    username.equals(userDetails.getUsername()) &&
                    !isTokenExpired(token);
        } catch (Exception e) {
            logger.warn("Token validation failed: {}", e.getMessage());
            return false;
        }
    }

    // üîí –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π
    public boolean isTokenExpired(String token) {
        try {
            return extractExpiration(token).before(new Date());
        } catch (Exception e) {
            logger.warn("Could not check token expiration: {}", e.getMessage());
            return true; // –í–≤–∞–∂–∞—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏
        }
    }

    // üìÖ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // üìÖ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
    public Date extractIssuedAt(String token) {
        return extractClaim(token, Claims::getIssuedAt);
    }

    // üß† –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–ª–µ (–∑–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥)
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        try {
            final Claims claims = extractAllClaims(token);
            return claimsResolver.apply(claims);
        } catch (ExpiredJwtException e) {
            logger.debug("JWT token is expired: {}", e.getMessage());
            throw e;
        } catch (UnsupportedJwtException e) {
            logger.warn("JWT token is unsupported: {}", e.getMessage());
            throw e;
        } catch (MalformedJwtException e) {
            logger.warn("JWT token is malformed: {}", e.getMessage());
            throw e;
        } catch (SignatureException e) {
            logger.warn("JWT signature validation failed: {}", e.getMessage());
            throw e;
        } catch (IllegalArgumentException e) {
            logger.warn("JWT token compact of handler are invalid: {}", e.getMessage());
            throw e;
        } catch (Exception e) {
            logger.error("Unexpected error extracting claims from token: {}", e.getMessage(), e);
            throw new RuntimeException("Could not extract claims from token", e);
        }
    }

    // üì¶ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ claims (–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–æ–∫–µ–Ω–∞)
    private Claims extractAllClaims(String token) {
        return Jwts
                .parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // üîë –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –∑ BASE64 —Å—Ç—Ä–æ–∫–∏
    private Key getSignInKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    // üîç –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ—Ä–∏—Å–Ω—ñ –º–µ—Ç–æ–¥–∏

    // ‚è∞ –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    public long getTokenExpirationTime(String token) {
        try {
            Date expiration = extractExpiration(token);
            return expiration.getTime() - System.currentTimeMillis();
        } catch (Exception e) {
            logger.warn("Could not get token expiration time: {}", e.getMessage());
            return 0;
        }
    }

    // üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä–µ–±—É—î —Ç–æ–∫–µ–Ω –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–º–µ–Ω—à–µ 2 –≥–æ–¥–∏–Ω –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è)
    public boolean isTokenNearExpiry(String token) {
        try {
            long timeLeft = getTokenExpirationTime(token);
            long twoHoursInMillis = 2 * 60 * 60 * 1000; // 2 –≥–æ–¥–∏–Ω–∏
            return timeLeft < twoHoursInMillis && timeLeft > 0;
        } catch (Exception e) {
            logger.warn("Could not check token expiry status: {}", e.getMessage());
            return true;
        }
    }

    // üìä –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞—É–¥–∏—Ç—É
    public Map<String, Object> extractAllTokenInfo(String token) {
        try {
            Claims claims = extractAllClaims(token);
            Map<String, Object> tokenInfo = new HashMap<>();

            tokenInfo.put("username", claims.getSubject());
            tokenInfo.put("userId", claims.get("userId"));
            tokenInfo.put("role", claims.get("role"));
            tokenInfo.put("name", claims.get("name"));
            tokenInfo.put("issuedAt", claims.getIssuedAt());
            tokenInfo.put("expiration", claims.getExpiration());
            tokenInfo.put("isExpired", isTokenExpired(token));
            tokenInfo.put("timeLeft", getTokenExpirationTime(token));

            return tokenInfo;
        } catch (Exception e) {
            logger.warn("Could not extract all token info: {}", e.getMessage());
            return new HashMap<>();
        }
    }

    // üßπ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –≤–∏–Ω—è—Ç–∫—ñ–≤ (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)
    public boolean isTokenValidSilent(String token) {
        try {
            extractAllClaims(token);
            return !isTokenExpired(token);
        } catch (Exception e) {
            return false;
        }
    }

    // üÜî –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏—Å–ª–æ–≤–∏–π (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    public Long extractUserIdAsLong(String token) {
        try {
            String userId = extractUserId(token);
            return userId != null ? Long.parseLong(userId) : null;
        } catch (NumberFormatException e) {
            logger.warn("UserId is not a valid number: {}", e.getMessage());
            return null;
        } catch (Exception e) {
            logger.warn("Could not extract userId as Long: {}", e.getMessage());
            return null;
        }
    }

    // üé≠ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä–æ–ª—å
    public boolean hasRole(String token, String requiredRole) {
        try {
            String userRole = extractRole(token);
            return requiredRole.equals(userRole);
        } catch (Exception e) {
            logger.warn("Could not check user role: {}", e.getMessage());
            return false;
        }
    }

    // üëë –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º
    public boolean isAdmin(String token) {
        return hasRole(token, "ROLE_ADMIN");
    }

    // üë§ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–∏—á–∞–π–Ω–∏–º —é–∑–µ—Ä–æ–º
    public boolean isUser(String token) {
        return hasRole(token, "ROLE_USER");
    }

    // üîç –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω (–¥–ª—è –¥–µ–±–∞–≥—É)
    public void logTokenInfo(String token, String action) {
        if (logger.isDebugEnabled()) {
            try {
                Map<String, Object> tokenInfo = extractAllTokenInfo(token);
                logger.debug("üîê JWT Token {} - User: {}, Role: {}, Expires: {}, TimeLeft: {}ms",
                        action,
                        tokenInfo.get("username"),
                        tokenInfo.get("role"),
                        tokenInfo.get("expiration"),
                        tokenInfo.get("timeLeft"));
            } catch (Exception e) {
                logger.debug("Could not log token info for action {}: {}", action, e.getMessage());
            }
        }
    }

    // üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∑ —Ç–∏–º–∏ –∂ claims (–¥–ª—è refresh)
    public String refreshToken(String oldToken) {
        try {
            Claims claims = extractAllClaims(oldToken);
            String username = claims.getSubject();

            // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –∑ —Ç–∏–º–∏ –∂ claims –∞–ª–µ –Ω–æ–≤–∏–º —á–∞—Å–æ–º
            Map<String, Object> newClaims = new HashMap<>();
            newClaims.put("userId", claims.get("userId"));
            newClaims.put("role", claims.get("role"));
            newClaims.put("name", claims.get("name"));

            return Jwts.builder()
                    .setClaims(newClaims)
                    .setSubject(username)
                    .setIssuedAt(new Date(System.currentTimeMillis()))
                    .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 –≥–æ–¥–∏–Ω
                    .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                    .compact();

        } catch (Exception e) {
            logger.error("Could not refresh token: {}", e.getMessage(), e);
            throw new RuntimeException("Could not refresh token", e);
        }
    }

    // ‚ö° –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–∫–µ–Ω –≤–∑–∞–≥–∞–ª—ñ —Å—Ö–æ–∂–∏–π –Ω–∞ JWT
    public boolean isValidJwtFormat(String token) {
        if (token == null || token.trim().isEmpty()) {
            return false;
        }

        // JWT –º–∞—î 3 —á–∞—Å—Ç–∏–Ω–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫—Ä–∞–ø–∫–∞–º–∏
        String[] parts = token.split("\\.");
        return parts.length == 3;
    }

    // üßº –û—á–∏—â–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    public String cleanToken(String token) {
        if (token == null) return null;

        // –í–∏–¥–∞–ª—è—î–º–æ Bearer prefix —è–∫—â–æ —î
        if (token.startsWith("Bearer ")) {
            token = token.substring(7);
        }

        return token.trim();
    }

    // üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å—É —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–≥—ñ–≤
    public String getTokenSummary(String token) {
        try {
            String username = extractUsername(token);
            String role = extractRole(token);
            boolean expired = isTokenExpired(token);

            return String.format("User: %s, Role: %s, Expired: %s",
                    username != null ? username : "unknown",
                    role != null ? role : "unknown",
                    expired);
        } catch (Exception e) {
            return "Invalid token";
        }
    }
}
