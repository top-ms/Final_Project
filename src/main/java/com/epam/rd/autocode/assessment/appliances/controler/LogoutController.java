package com.epam.rd.autocode.assessment.appliances.controler;

import com.epam.rd.autocode.assessment.appliances.service.JwtService;
import com.epam.rd.autocode.assessment.appliances.service.impl.RequestAuditService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.*;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import java.util.Arrays;


@Controller
public class LogoutController {

    private static final Logger log = LoggerFactory.getLogger(LogoutController.class);

    private final JwtService jwtService;
    private final RequestAuditService auditService;

    public LogoutController(JwtService jwtService, RequestAuditService auditService) {
        this.jwtService = jwtService;
        this.auditService = auditService;
    }

    // üö™ POST logout (–æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥)
    @PostMapping("/logout")
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        String username = "UNKNOWN";
        String userId = null;
        String role = null;

        try {
            // üîç –í–∏—Ç—è–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ JWT –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
            String jwtToken = extractJwtFromCookies(request);
            if (jwtToken != null && jwtService.isValidJwtFormat(jwtToken)) {
                try {
                    username = jwtService.extractUsername(jwtToken);
                    userId = jwtService.extractUserId(jwtToken);
                    role = jwtService.extractRole(jwtToken);

                    log.info("üîç Logout attempt from user: {} (ID: {}, Role: {})", username, userId, role);
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Could not extract user info from JWT during logout: {}", e.getMessage());
                    username = "INVALID_TOKEN_USER";
                }
            }

            // üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ JWT cookie
            Cookie jwtCookie = new Cookie("jwt", null);
            jwtCookie.setHttpOnly(true); // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ JavaScript
            jwtCookie.setSecure(false); // –ü–æ—Å—Ç–∞–≤—Ç–µ true –¥–ª—è HTTPS
            jwtCookie.setPath("/"); // –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—å–æ–≥–æ —Å–∞–π—Ç—É
            jwtCookie.setMaxAge(0); // –í–∏–¥–∞–ª—è—î–º–æ cookie (–≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è = 0)

            response.addCookie(jwtCookie);

            // üßπ –û—á–∏—â—É—î–º–æ Security Context (Spring Security)
            SecurityContextHolder.clearContext();

            // üìä –õ–æ–≥—É—î–º–æ logout –≤ –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—É
            String clientIp = getClientIpAddress(request);
            String userAgent = request.getHeader("User-Agent");

            auditService.logRequestAsync(username, userId, role, "/logout", "POST", clientIp, userAgent);

            log.info("üëã User {} successfully logged out from IP: {}", username, clientIp);

        } catch (Exception e) {
            log.error("‚ùå Error during logout process: {}", e.getMessage(), e);
            // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞ - –≤—Å–µ –æ–¥–Ω–æ –≤–∏–∫–æ–Ω—É—î–º–æ logout
        }

        // üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –≤–∏—Ö—ñ–¥
        return "redirect:/login?logout=success";
    }

    // üö™ GET logout (–¥–ª—è –ø–æ—Å–∏–ª–∞–Ω—å —Ç–∏–ø—É <a href="/logout">)
    @GetMapping("/logout")
    public String logoutGet(HttpServletRequest request, HttpServletResponse response) {
        log.debug("üîó GET logout request received, redirecting to POST logout logic");
        return logout(request, response);
    }

    // üç™ –í–∏—Ç—è–≥—É—î–º–æ JWT —Ç–æ–∫–µ–Ω –∑ cookies
    private String extractJwtFromCookies(HttpServletRequest request) {
        if (request.getCookies() != null) {
            return Arrays.stream(request.getCookies())
                    .filter(cookie -> "jwt".equals(cookie.getName()))
                    .findFirst()
                    .map(Cookie::getValue)
                    .orElse(null);
        }
        return null;
    }

    // üåê –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π IP –∞–¥—Ä–µ—Å –∫–ª—ñ—î–Ω—Ç–∞ (–≤—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–∫—Å—ñ)
    private String getClientIpAddress(HttpServletRequest request) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä—ñ–≤
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty() && !"unknown".equalsIgnoreCase(xForwardedFor)) {
            // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π IP (—è–∫—â–æ —ó—Ö –∫—ñ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É)
            return xForwardedFor.split(",")[0].trim();
        }

        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty() && !"unknown".equalsIgnoreCase(xRealIp)) {
            return xRealIp;
        }

        String xForwarded = request.getHeader("X-Forwarded");
        if (xForwarded != null && !xForwarded.isEmpty() && !"unknown".equalsIgnoreCase(xForwarded)) {
            return xForwarded;
        }

        String forwarded = request.getHeader("Forwarded");
        if (forwarded != null && !forwarded.isEmpty() && !"unknown".equalsIgnoreCase(forwarded)) {
            return forwarded;
        }

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ–∫—Å—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π remote address
        return request.getRemoteAddr();
    }
}
