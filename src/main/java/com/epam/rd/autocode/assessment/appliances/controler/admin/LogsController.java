package com.epam.rd.autocode.assessment.appliances.controler.admin;

import com.epam.rd.autocode.assessment.appliances.model.RequestAuditLog;
import com.epam.rd.autocode.assessment.appliances.service.impl.RequestAuditService;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;

@Controller
@RequestMapping("/admin")
public class LogsController {

    private final RequestAuditService auditService;

    public LogsController(RequestAuditService auditService) {
        this.auditService = auditService;
    }

    @GetMapping("/logs")
    public String viewLogs(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "50") int size,
            @RequestParam(required = false) String username,
            @RequestParam(required = false) String method,
            @RequestParam(required = false) String role,
            Model model) {

        System.out.println("üîç Logs request received:");
        System.out.println("üìÑ Page: " + page + ", Size: " + size);
        System.out.println("üìã Filters - Username: '" + username + "', Method: '" + method + "', Role: '" + role + "'");

        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            Page<RequestAuditLog> logsPage = auditService.getFilteredLogs(page, size, username, method, role);

            System.out.println("üìä Query results: " + logsPage.getTotalElements() + " total logs found");
            System.out.println("üìã Current page content: " + logsPage.getContent().size() + " logs");

            // –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
            model.addAttribute("logs", logsPage.getContent());
            model.addAttribute("currentPage", page);
            model.addAttribute("totalPages", logsPage.getTotalPages());
            model.addAttribute("totalLogs", logsPage.getTotalElements());

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏
            model.addAttribute("currentUsername", username);
            model.addAttribute("currentMethod", method);
            model.addAttribute("currentRole", role);

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            long uniqueUsers = auditService.getUniqueUsersCount();
            long uniqueIPs = auditService.getUniqueIPsCount();
            long todayLogs = auditService.getTodayLogsCount();

            model.addAttribute("uniqueUsers", uniqueUsers);
            model.addAttribute("uniqueIPs", uniqueIPs);
            model.addAttribute("todayLogs", todayLogs);

            System.out.println("üìà Statistics - Users: " + uniqueUsers + ", IPs: " + uniqueIPs + ", Today: " + todayLogs);

            // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            boolean hasFilters = (username != null && !username.trim().isEmpty()) ||
                    (method != null && !method.trim().isEmpty()) ||
                    (role != null && !role.trim().isEmpty());
            model.addAttribute("hasActiveFilters", hasFilters);

            // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
            model.addAttribute("hasPrevious", page > 0);
            model.addAttribute("hasNext", page < logsPage.getTotalPages() - 1);
            model.addAttribute("isFirstPage", page == 0);
            model.addAttribute("isLastPage", page >= logsPage.getTotalPages() - 1);

            // –î–ª—è debug - –¥–æ–¥–∞—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –≤ –ª–æ–≥
            if (!logsPage.getContent().isEmpty()) {
                RequestAuditLog firstLog = logsPage.getContent().get(0);
                System.out.println("üîç First log: " + firstLog.getUsername() + " -> " + firstLog.getPath() + " at " + firstLog.getTimestamp());
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error loading logs page: " + e.getMessage());
            e.printStackTrace();

            // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            model.addAttribute("logs", new ArrayList<>());
            model.addAttribute("currentPage", 0);
            model.addAttribute("totalPages", 0);
            model.addAttribute("totalLogs", 0L);
            model.addAttribute("uniqueUsers", 0L);
            model.addAttribute("uniqueIPs", 0L);
            model.addAttribute("todayLogs", 0L);
            model.addAttribute("hasActiveFilters", false);
            model.addAttribute("hasPrevious", false);
            model.addAttribute("hasNext", false);
            model.addAttribute("isFirstPage", true);
            model.addAttribute("isLastPage", true);

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            model.addAttribute("currentUsername", username);
            model.addAttribute("currentMethod", method);
            model.addAttribute("currentRole", role);

            // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            model.addAttribute("errorMessage", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤: " + e.getMessage());
        }

        return "admin/viewLogs"; // –ù–∞–∑–≤–∞ Thymeleaf —à–∞–±–ª–æ–Ω—É
    }

}

