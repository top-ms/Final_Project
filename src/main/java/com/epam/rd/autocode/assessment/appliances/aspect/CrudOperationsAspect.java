package com.epam.rd.autocode.assessment.appliances.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class CrudOperationsAspect {

    private static final Logger logger = LoggerFactory.getLogger(CrudOperationsAspect.class);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    @AfterReturning("execution(* com.epam.rd.autocode.assessment.appliances.service.impl.*.save*(..))")
    public void logCreateOperation(JoinPoint joinPoint) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        logger.info("üÜï [CREATE] {}.{} - –ù–æ–≤–∏–π –∑–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ", className, methodName);
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    @AfterReturning("execution(* com.epam.rd.autocode.assessment.appliances.service.impl.*.delete*(..))")
    public void logDeleteOperation(JoinPoint joinPoint) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();
        Object[] args = joinPoint.getArgs();

        logger.warn("üóëÔ∏è [DELETE] {}.{} - –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ. ID: {}", className, methodName, args[0]);
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    @AfterReturning("execution(* com.epam.rd.autocode.assessment.appliances.service.impl.*.update*(..))")
    public void logUpdateOperation(JoinPoint joinPoint) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();
        Object[] args = joinPoint.getArgs();

        logger.info("üìù [UPDATE] {}.{} - –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {}",
                className, methodName, args.length > 0 ? args[0] : "N/A");
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –ø–æ—à—É–∫—É
    @AfterReturning(pointcut = "execution(* com.epam.rd.autocode.assessment.appliances.service.impl.*.find*(..))",
            returning = "result")
    public void logFindOperation(JoinPoint joinPoint, Object result) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        boolean found = result != null && !result.toString().contains("Optional.empty");

        if (found) {
            logger.info("üîç [FIND] {}.{} - –î–∞–Ω—ñ –∑–Ω–∞–π–¥–µ–Ω–æ", className, methodName);
        } else {
            logger.warn("üîç‚ùå [FIND] {}.{} - –î–∞–Ω—ñ –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ", className, methodName);
        }
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –ø–∞—Ä–æ–ª—è–º–∏ (–±–µ–∑–ø–µ–∫–∞)
    @Before("execution(* com.epam.rd.autocode.assessment.appliances.service.impl.*.*Password*(..))")
    public void logPasswordOperation(JoinPoint joinPoint) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        logger.warn("üîê [SECURITY] {}.{} - –û–ø–µ—Ä–∞—Ü—ñ—è –∑ –ø–∞—Ä–æ–ª–µ–º –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è", className, methodName);
    }
}