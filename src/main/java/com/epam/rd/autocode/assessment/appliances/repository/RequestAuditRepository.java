package com.epam.rd.autocode.assessment.appliances.repository;

import com.epam.rd.autocode.assessment.appliances.model.RequestAuditLog;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface RequestAuditRepository extends JpaRepository<RequestAuditLog, Long> {

    // üîç –ü–æ—à—É–∫ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –ø–æ –¥–∞—Ç—ñ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    List<RequestAuditLog> findByUsernameOrderByTimestampDesc(String username, Pageable pageable);

    // üìä –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑–∞–≥–∞–ª–æ–º
    List<RequestAuditLog> findAllByOrderByTimestampDesc(Pageable pageable);

    // üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥
    long countByTimestampBetween(LocalDateTime startDate, LocalDateTime endDate);

    // üë§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    long countByUsername(String username);

    // üé≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è—Ö
    @Query("SELECT r.role, COUNT(r) FROM RequestAuditLog r GROUP BY r.role")
    List<Object[]> countRequestsByRole();

    // ‚ö†Ô∏è –ü—ñ–¥–æ–∑—Ä—ñ–ª–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑ –æ–¥–Ω–æ–≥–æ IP –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É)
    @Query("SELECT r FROM RequestAuditLog r WHERE r.timestamp >= :since " +
            "AND r.clientIp IN (SELECT r2.clientIp FROM RequestAuditLog r2 " +
            "WHERE r2.timestamp >= :since GROUP BY r2.clientIp HAVING COUNT(r2) >= :minRequests)")
    List<RequestAuditLog> findSuspiciousActivity(@Param("since") LocalDateTime since,
                                                 @Param("minRequests") int minRequests);

    // üìä –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
    @Query("SELECT r.username, COUNT(r) as requestCount FROM RequestAuditLog r " +
            "WHERE r.username != 'ANONYMOUS' AND r.timestamp >= :since " +
            "GROUP BY r.username ORDER BY requestCount DESC")
    List<Object[]> findTopActiveUsers(@Param("since") LocalDateTime since, Pageable pageable);

    // üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    void deleteByTimestampBefore(LocalDateTime cutoffDate);

    // üîß –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ –ª–æ–≥—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    @Query("SELECT r FROM RequestAuditLog r WHERE " +
            "(:username IS NULL OR :username = '' OR LOWER(r.username) LIKE LOWER(CONCAT('%', :username, '%'))) AND " +
            "(:method IS NULL OR :method = '' OR r.method = :method) AND " +
            "(:role IS NULL OR :role = '' OR r.role = :role) " +
            "ORDER BY r.timestamp DESC")
    Page<RequestAuditLog> findFilteredLogs(@Param("username") String username,
                                           @Param("method") String method,
                                           @Param("role") String role,
                                           Pageable pageable);

    // üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    @Query("SELECT COUNT(DISTINCT r.username) FROM RequestAuditLog r " +
            "WHERE r.username NOT IN ('ANONYMOUS', 'INVALID_TOKEN')")
    long countDistinctUsername();

    // üåç –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö IP –∞–¥—Ä–µ—Å
    @Query("SELECT COUNT(DISTINCT r.clientIp) FROM RequestAuditLog r")
    long countDistinctClientIp();

    // üìÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–≥—ñ–≤ –ø—ñ—Å–ª—è –ø–µ–≤–Ω–æ—ó –¥–∞—Ç–∏
    long countByTimestampAfter(LocalDateTime timestamp);

    // üåê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ IP –∞–¥—Ä–µ—Å–∞—Ö
    @Query("SELECT r.clientIp, COUNT(r) as requestCount FROM RequestAuditLog r " +
            "WHERE r.timestamp >= :since AND r.clientIp IS NOT NULL " +
            "GROUP BY r.clientIp ORDER BY requestCount DESC")
    List<Object[]> findIpStats(@Param("since") LocalDateTime since, Pageable pageable);

    // üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –æ–∫—Ä–µ–º–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ (—è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–µ –ø—Ä–∞—Ü—é—î)

    // –ü–æ—à—É–∫ —Ç—ñ–ª—å–∫–∏ –ø–æ username
    Page<RequestAuditLog> findByUsernameContainingIgnoreCaseOrderByTimestampDesc(String username, Pageable pageable);

    // –ü–æ—à—É–∫ —Ç—ñ–ª—å–∫–∏ –ø–æ method
    Page<RequestAuditLog> findByMethodOrderByTimestampDesc(String method, Pageable pageable);

    // –ü–æ—à—É–∫ —Ç—ñ–ª—å–∫–∏ –ø–æ role
    Page<RequestAuditLog> findByRoleOrderByTimestampDesc(String role, Pageable pageable);

    // –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω—ñ –ø–æ—à—É–∫–∏
    Page<RequestAuditLog> findByUsernameContainingIgnoreCaseAndMethodOrderByTimestampDesc(String username, String method, Pageable pageable);

    Page<RequestAuditLog> findByUsernameContainingIgnoreCaseAndRoleOrderByTimestampDesc(String username, String role, Pageable pageable);

    Page<RequestAuditLog> findByMethodAndRoleOrderByTimestampDesc(String method, String role, Pageable pageable);

    Page<RequestAuditLog> findByUsernameContainingIgnoreCaseAndMethodAndRoleOrderByTimestampDesc(String username, String method, String role, Pageable pageable);
}